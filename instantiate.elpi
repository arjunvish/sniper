pred instantiate i: term, i: term, o: term.
    instantiate (prod N Ty F) T (F T) :- coq.typecheck T TyT ok, coq.unify-leq TyT Ty ok. 
    instantiate T _ T. 

pred instantiate_term_list i: term, i: (list term), o: (list term).
    instantiate_term_list T [U|L] [V|M] :- instantiate T U V, 
    instantiate_term_list T L M. 
    instantiate_term_list T [] [].

pred instantiate_list_list_type i: (list term), i: (list term), o: (list term).
    instantiate_list_list [ T| XS] L R :-
        instantiate_term_list T L R1, instantiate_list_list R1 L R1', 
        instantiate_list_list XS L R2, std.append R1' R2 R.
    instantiate_list_list [] L [].

pred type_global i: term, o: term.
  type_global (global (indt I)) Ty :- coq.env.indt I _ _ _ Ty _ _.

pred codomain i:term, o:term.
  codomain (prod Na Ty F) R :- !, pi x\ decl x Na Ty => codomain (F x) R. 
  codomain T T.

pred is_not_prop i: term, o: diagnostic.
  is_not_prop T ok :- coq.unify-leq T {{Prop}} (error S).
  is_not_prop T (error "the term is Prop").

pred codomain_not_prop i: term, o: diagnostic.
codomain_not_prop T ok :- codomain T U, is_not_prop U ok.

pred find_instantiated_params i: term, o: (list (pair term (list term))).
    find_instantiated_params (fun N Ty F) L :- !, find_instantiated_params Ty R1,
        pi x\ decl x N Ty => find_instantiated_params (F x) R2, append_nodup  R1 R2 L.
    find_instantiated_params (prod N Ty F) L :- !, find_instantiated_params Ty R1,
        pi x\ decl x N Ty => find_instantiated_params (F x) R2, append_nodup  R1 R2 L.
    find_instantiated_params (let N Ty V F) R :- !, find_instantiated_params Ty R1,
        pi x\ def x N Ty V => find_instantiated_params (F x) R2, append_nodup R1 R2 R.
    find_instantiated_params (match T U L) R :- find_instantiated_params T R1, 
        std.map L find_instantiated_params R2,
        std.flatten R2 R3,
        append_nodup  R1 R3 R.
    find_instantiated_params (fix Na _ Ty F) R :- !, find_instantiated_params Ty R1,
        pi x\ decl x Na Ty => find_instantiated_params (F x) R2,
        append_nodup R1 R2 R.
    find_instantiated_params (app [(global G)|X]) [(pr (global G) R)] :- 
    type_global (global G) Ty, codomain_not_prop Ty ok, %TODO one single call to coq.env.indt
    get_number_of_parameters (global G) NB,
        std.take NB X R.
    find_instantiated_params (app L) R :- std.map L find_instantiated_params R1, std.flatten R1 R.
    find_instantiated_params _ [].
  solve (goal _ _ Ty _ _ as G) GL :- find_instantiated_params Ty R.

pred find_instantiated_params_in_list i: (list term), o: (list (pair term (list term))).
    find_instantiated_params_in_list [X | XS] L :- find_instantiated_params X R1, 
    find_instantiated_params_in_list XS R2, append_nodup R1 R2 L.
    find_instantiated_params_in_list [] [].