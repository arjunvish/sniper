pred get_number_of_parameters i: term, o: int.
    get_number_of_parameters (global (indt I)) NB :- coq.env.indt I _ NB _ _ _ _.
    get_number_of_parameters (global (indc C)) NB :- coq.env.indc C NB _ _ _.
    get_number_of_parameters _ 0.

pred tuple_to_list i: term, o: (list term).
    tuple_to_list {{ pair lp:P1 lp:P2 }} R :- !, tuple_to_list P1 R1, tuple_to_list P2 R2,
        std.append R1 R2 R.
    tuple_to_list T [T].

pred singl_tuple_to_list i: (list argument), o: (list term).
    singl_tuple_to_list [trm T] R :- tuple_to_list T R.
    singl_tuple_to_list [] [].

pred add_if_polymorphic i: term, i: (list term), o: (list term).
    add_if_polymorphic ((prod Na Ty Bod) as T) L [T | L] :- coq.unify-eq Ty {{ Type }} ok.
    add_if_polymorphic _ L L.

pred is_polymorphic i: pair term term.
    is_polymorphic (pr _ (prod Na Ty F)) :- coq.unify-eq Ty {{ Type }} ok.

pred polymorphic_hypotheses i: (list (pair term term)), o: (list (pair term term)).
    polymorphic_hypotheses L R :- std.filter L is_polymorphic R.

pred collect_hypotheses_from_context i: goal-ctx, o: list term, o: list (pair term term).
    collect_hypotheses_from_context [(decl X _ Ty)| XS] [Ty|R] [pr X Ty|R'] :- collect_hypotheses_from_context XS R R'.
    collect_hypotheses_from_context [] [] [].

pred append_nodup i: list A, i: list A, o: list A.
    append_nodup [X|XS] Y R :- append_nodup XS Y R, std.mem! R X.
    append_nodup [X|XS] Y [X|R] :- append_nodup XS Y R.
    append_nodup [] Y Y.

pred find_occurences_aux i: list A, i: A, i: int, o: list int.
    find_occurences_aux [X|XS] X N [N|R] :- !,  M is N + 1, find_occurences_aux XS X M R.
    find_occurences_aux [Y |XS] X N R :- M is N + 1, find_occurences_aux XS X M R.
    find_occurences_aux [] X N [].

pred find_occurences i: list A, i: A, o: list int.
    find_occurences L X R :- find_occurences_aux L X 0 R. 

pred filter_key i: A, i: list (pair A B), o: list B. %takes all the corresponding values for a given key in a list of pairs
    filter_key X [pr X Y | XS] [Y|R] :- !, filter_key X XS R.
    filter_key X [Y | XS] R :- filter_key X XS R.
    filter_key X [] []. 

pred nth i:int, i:list A, o:A. % a version of nth with no fatal error to handle backtracking
    nth 0 [X|_ ] R :- !, X = R.
    nth N [_|XS] R :- N > 0, !, N1 is N - 1, nth N1 XS R.

pred argument_to_term i: list argument, o: list (pair term term).
    argument_to_term [trm T| XS] [pr T Ty|R] :- coq.typecheck T Ty ok, argument_to_term XS R.
    argument_to_term [] [].